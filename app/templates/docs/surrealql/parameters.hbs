<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.parameters">Parameters</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>Parameters</h2>
	<p>Parameters can be used like variables to store a value which can then be used in a subsequent query. A parameter can store any value, including the result of a query. Parameters can be defined within the SQL, or can be passed in using the client libraries as request variables.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Defining parameters within SurrealQL</h3>
	<p>To define a parameter in SurrealQL, use the <Link @link="docs.surrealql.statements.let"><Ascua::Prism::Inline @language="surql" @code="LET" /></Link> statement. The name of the parameter should begin with a <code>$</code> character.</p>
	<Code @name="docs/surrealql/statements/let/simple.surql" />
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Defining parameters within client libraries</h3>
	<p>SurrealDB's client libraries allow parameters to be passed in as JSON values, which are then converted to SurrealDB data types when the query is run. The following example show a variable being used within a SurrealQL query from the JavaScript library.</p>
	<Code @name="docs-surrealql-parameters-javascript.js" text="JavaScript library">
		let people = await surreal.query("SELECT * FROM article WHERE status INSIDE $status", {
			status: ["live", "draft"],
		});
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Reserved variable names</h3>
	<p>SurrealDB uses predefined variables. For that purpose, you can use those variables inside your query but you cannot declare new parameters using one of the following name:</p>
	<Layout::Table filled>
		<table>
			<thead>
				<tr>
					<th w-10>Name</th>
					<th w-60>Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>
						<code>$auth</code>
					</td>
					<td>Represents the currently authenticated scope user</td>
				</tr>
				<tr>
					<td>
						<code>$token</code>
					</td>
					<td>Represents values held inside the JWT token used for the current session</td>
				</tr>
				<tr>
					<td>
						<code>$scope</code>
					</td>
					<td>Represents the name of the scope of a currently authenticated scope user.</td>
				</tr>
				<tr>
					<td>
						<code>$session</code>
					</td>
					<td>Represents values from the <Link @link="docs.surrealql.functions.session">session</Link> functions as an object</td>
				</tr>
				<tr>
					<td>
						<code>$before</code>
					</td>
					<td>Represents the value before a mutation on a field</td>
				</tr>
				<tr>
					<td>
						<code>$after</code>
					</td>
					<td>Represents the value after a mutation on a field</td>
				</tr>
				<tr>
					<td>
						<code>$value</code>
					</td>
					<td>Represents the value after a mutation on a field (identical to <code>$after</code> in the case of an event)</td>
				</tr>
				<tr>
					<td>
						<code>$input</code>
					</td>
					<td>Represents the initially inputted value in a field definition, as the <code>value</code> clause could have modified the <code>$value</code> variable</td>
				</tr>
				<tr>
					<td>
						<code>$parent</code>
					</td>
					<td>Represents the parent record in a subquery</td>
				</tr>
				<tr>
					<td>
						<a href="/docs/surrealql/statements/define/event#specific-events">
							<code>$event</code>
						</a>
					</td>
					<td>Represents the type of table event triggered on an <Link @link="docs.surrealql.statements.define.event">event</Link>.</td>
				</tr>
			</tbody>
		</table>
	</Layout::Table>
</Layout::Text>

<Layout::Gap large />